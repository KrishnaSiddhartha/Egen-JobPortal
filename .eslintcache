[{"/Users/snemalik/Desktop/JobPortal-Egen/src/index.js":"1","/Users/snemalik/Desktop/JobPortal-Egen/src/reportWebVitals.js":"2","/Users/snemalik/Desktop/JobPortal-Egen/src/App.js":"3","/Users/snemalik/Desktop/JobPortal-Egen/src/JobTile.jsx":"4","/Users/snemalik/Desktop/JobPortal-Egen/src/SearchBar.jsx":"5"},{"size":500,"mtime":1607921268000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607921268000,"results":"8","hashOfConfig":"7"},{"size":1483,"mtime":1607921268000,"results":"9","hashOfConfig":"7"},{"size":531,"mtime":1607921268000,"results":"10","hashOfConfig":"7"},{"size":1560,"mtime":1607921268000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"13waqqa",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/snemalik/Desktop/JobPortal-Egen/src/index.js",[],["24","25"],"/Users/snemalik/Desktop/JobPortal-Egen/src/reportWebVitals.js",[],"/Users/snemalik/Desktop/JobPortal-Egen/src/App.js",[],"/Users/snemalik/Desktop/JobPortal-Egen/src/JobTile.jsx",[],"/Users/snemalik/Desktop/JobPortal-Egen/src/SearchBar.jsx",["26"],"import React from \"react\"\nimport {isEmpty} from \"lodash\"\nimport './SearchBar.css'\n\nexport const SearchBar = ({onChangeUrl}) => {\n    const [searchParam , setSearchParam] = React.useState('')\n    const [location , setLocation] = React.useState('')\n    const [fullTimeBoolean , setFullTimeBoolean] = React.useState(false)\n\n    const onValueChange = (textElement, setFn) => {\n        setFn(textElement.target.value)\n        onChangeUrl(formUrl())\n    }\n\n    const parse = (s)=>{\n        return s.toLowerCase().replace(\" \",\"+\")\n    }\n\n    const formUrl = () => {\n        var queryString = ''\n        if(!isEmpty(location))\n            queryString = `${queryString}location=${parse(location)}`\n        if(!isEmpty(searchParam))\n        {\n            queryString = isEmpty(queryString)?queryString:`${queryString}&`\n            queryString = `&${queryString}description=${parse(searchParam)}`\n        }\n        if(fullTimeBoolean) {\n            queryString = isEmpty(queryString) ? queryString : `${queryString}&`\n            queryString = `&${queryString}fullTime=true`\n        }\n        return `${queryString}`\n    }\n\n    return(\n        <div className=\"SearchBar\">\n            <input className=\"SearchBar-searchParam\" placeholder=\"Filter by title, company\" value={searchParam} type='text' onChange={(textElement)=> onValueChange(textElement,setSearchParam)}/>\n            <input className=\"SearchBar-location\" placeholder=\"Filter by location\" value={location} type='text' onChange={(textElement)=> onValueChange(textElement,setLocation)}/>\n        </div>\n    )\n};",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":8,"column":30,"nodeType":"33","messageId":"34","endLine":8,"endColumn":48},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'setFullTimeBoolean' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]